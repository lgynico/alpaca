using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

namespace {{.Namespace}}
{

    public interface IConfig
    {
        void Load(string filepath);
        string Filename();
    }

    public class ConfigMgr
    {
        internal static readonly JsonSerializerSettings options = new JsonSerializerSettings
        {
            ContractResolver = new CamelCasePropertyNamesContractResolver()
        };

        public static ConfigMgr Instance { get; private set; } = new ConfigMgr();
        private readonly Dictionary<Type, IConfig> configs = new Dictionary<Type, IConfig>();

        private ConfigMgr() { }

        public void Init()
        {
            {{range .Configs}}Register(new {{.}}());
	        {{end}}
        }

        public void Register(IConfig config)
        {
            configs.Add(config.GetType(), config);
        }

        public void Load(string filepath)
        {
            foreach (var config in configs)
            {
                config.Value.Load(filepath);
            }
            configs.Remove(typeof(Consts));
        }

        public T GetConfgs<T>() where T : IConfig
        {
            if (configs.TryGetValue(typeof(T), out IConfig config))
            {
                return (T)config;
            }

            return default;
        }
    }
}