using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;

namespace {{.Namespace}}
{
    public class {{.ConfigName}}Config
    {
        {{range .ConfigFields}}{{if .Desc}}/// <summary>
        /// {{.Desc}}
        /// </summary>{{end}}
        public {{.Type}} {{.Name}} { get; set; }
        {{end}}
    }

    public class {{.ConfigName}}Configs : IConfig
    {

        private readonly Dictionary<{{.KeyType}}, {{.ConfigName}}Config> configs = new Dictionary<{{.KeyType}}, {{.ConfigName}}Config>();

        public string Filename()
        {
            return "{{.Filename}}";
        }

        public void Load(string filepath)
        {
            string jsonStr = File.ReadAllText(Path.Combine(filepath, Filename() + ".json"));

            var configs = JsonConvert.DeserializeObject<List<{{.ConfigName}}Config>>(jsonStr, ConfigMgr.options);
            if (configs != null)
            {
                foreach (var conf in configs)
                {
                    this.configs.Add(conf.{{.KeyFieldName}}, conf);
                }
            }
        }

        public {{.ConfigName}}Config Get({{.KeyType}} key)
        {
            configs.TryGetValue(key, out {{.ConfigName}}Config config);
            return config;
        }
    }
}